{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","listItems","items","map","film","react_default","a","createElement","scope","ID","title","creator","runtime","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addHandler","assertThisInitialized","firebase","collection","add","state","currentTitle","currentCreator","currentRuntime","then","docRef","console","log","id","catch","error","readFilms","deleteHandler","doc","currentID","delete","currentComponent","get","querySnapshot","filmsArr","forEach","push","data","setState","films","handleTitleChange","e","target","value","handleRuntimeChange","handleCreatorChange","handleIDChange","total","db","totalRef","exists","type","onChange","onClick","src_List","Component","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","timestampsInSnapshots","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAkCiBA,MA9BjB,SAAcC,GAEd,IAAMC,EAAYD,EAAME,MAAMC,IAAI,SAACC,GAAD,OACjCC,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,MAAIC,MAAM,OAAOJ,EAAKK,IACtBJ,EAAAC,EAAAC,cAAA,UAAKH,EAAKM,OACVL,EAAAC,EAAAC,cAAA,UAAKH,EAAKO,SACVN,EAAAC,EAAAC,cAAA,UAAKH,EAAKQ,YAKX,OACAP,EAAAC,EAAAC,cAAA,SAAOM,UAAY,SACnBR,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,MAAIC,MAAM,OAAV,WACMH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,OAAV,SACAH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,OAAV,WACAH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,OAAV,aAGNH,EAAAC,EAAAC,cAAA,aAECN,KC2Lca,cAhNb,SAAAA,EAAYd,GAAM,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlB,KA4CRsB,WAAa,WACSN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,IACTS,cAEOC,WAAW,SAEpBC,IAAI,CACXhB,MAAOK,EAAKY,MAAMC,aAClBjB,QAASI,EAAKY,MAAME,eACpBjB,QAASG,EAAKY,MAAMG,iBACnBC,KAAK,SAASC,GACjBC,QAAQC,IAAI,6BAA8BF,EAAOG,MAEpDC,MAAM,SAASC,GACZJ,QAAQI,MAAM,0BAA2BA,KAE7CtB,EAAKuB,aA7DevB,EAmElBwB,cAAgB,WACHf,cAERC,WAAW,SAASe,IAAIzB,EAAKY,MAAMc,WAAWC,SAASX,KAAK,WAC7DE,QAAQC,IAAI,oCACXE,MAAM,SAASC,GAEhBJ,QAAQC,IAAI,4BAA8BG,KAG5CtB,EAAKuB,aA7EWvB,EAiFlBuB,UAAY,WACV,IAAIK,EAAgB3B,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,IACTS,cACOC,WAAW,SAIpBmB,MACRb,KAAK,SAASc,GACb,IAAIC,EAAW,GACbD,EAAcE,QAAQ,SAASP,GAG3BM,EAASE,KAAK,CACZvC,GAAI+B,EAAIL,GACRzB,MAAO8B,EAAIS,OAAOvC,MAClBC,QAAS6B,EAAIS,OAAOtC,QACpBC,QAAS4B,EAAIS,OAAOrC,UAEtBqB,QAAQC,IAAIM,EAAIL,GAAI,OAAQW,KAEhCb,QAAQC,IAAI,eAAiBY,GAE7BH,EAAiBO,SAAS,CACpBC,MAAOL,MAIhBV,MAAM,SAASC,GACZJ,QAAQC,IAAI,4BAA6BG,MA9G7BtB,EAoHlBqC,kBAAoB,SAACC,GACnBtC,EAAKmC,SAAS,CACZtB,aAAcyB,EAAEC,OAAOC,SAtHTxC,EA0HlByC,oBAAsB,SAACH,GACrBtC,EAAKmC,SAAS,CACZpB,eAAgBuB,EAAEC,OAAOC,SA5HXxC,EAgIlB0C,oBAAsB,SAACJ,GACrBtC,EAAKmC,SAAS,CACZrB,eAAgBwB,EAAEC,OAAOC,SAlIXxC,EAsIlB2C,eAAiB,SAACL,GAChBtC,EAAKmC,SAAS,CACZT,UAAWY,EAAEC,OAAOC,SAtItBxC,EAAKY,MAAQ,CACXgC,MAAO,GACPR,MAAO,CACP,CAAC1C,GAAG,YAAaC,MAAM,eAAgBC,QAAS,iBAAkBC,QAAQ,kBAC1E,CAACH,GAAG,aAAcC,MAAM,eAAgBC,QAAS,iBAAkBC,QAAQ,mBAE3E6B,UAAW,GACXb,aAAc,GACdC,eAAgB,GAChBC,eAAgB,IAXFf,mFAkBhB,IAAI4B,EAAmBzB,KAEjB0C,EAAKpC,cACPqC,EAAWD,EAAGnC,WAAW,SAASe,IAAI,SAC3BoB,EAAGnC,WAAW,SAE7BP,KAAKoB,YAELuB,EAASjB,MAAMb,KAAK,SAASS,GACxBA,EAAIsB,QACL7B,QAAQC,IAAI,kBAAmBM,EAAIS,QACnCN,EAAiBO,SAAS,CACxBS,MAAOnB,EAAIS,OAAOU,SAKpB1B,QAAQC,IAAI,uBAGXE,MAAM,SAASC,GACpBJ,QAAQC,IAAI,0BAA2BG,sCAsGvC,OACEhC,EAAAC,EAAAC,cAAA,OAAKM,UAAW,OAChBR,EAAAC,EAAAC,cAAA,OAAKM,UAAY,aACjBR,EAAAC,EAAAC,cAAA,kCAEAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKM,UAAY,OACjBR,EAAAC,EAAAC,cAAA,OAAKM,UAAY,OACjBR,EAAAC,EAAAC,cAAA,oCAA4BW,KAAKS,MAAMgC,SAKvCtD,EAAAC,EAAAC,cAAA,OAAKM,UAAY,OACfR,EAAAC,EAAAC,cAAA,OAAKM,UAAY,SAIfR,EAAAC,EAAAC,cAAA,+BACUF,EAAAC,EAAAC,cAAA,SAAOwD,KAAK,OAAOlD,UAAU,eAAesB,GAAG,YAAY6B,SAAU9C,KAAKkC,oBAE1E/C,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAOwD,KAAK,OAAOlD,UAAU,eAAesB,GAAG,cAAc6B,SAAU9C,KAAKsC,sBAEtFnD,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,UAAQwD,KAAK,SAASlD,UAAU,kBAAkBoD,QAAS/C,KAAKI,YAAhE,YACAjB,EAAAC,EAAAC,cAAA,YAIFF,EAAAC,EAAAC,cAAA,OAAKM,UAAY,SACfR,EAAAC,EAAAC,cAAA,iCACUF,EAAAC,EAAAC,cAAA,SAAOwD,KAAK,OAAOlD,UAAU,eAAesB,GAAG,cAAc6B,SAAU9C,KAAKuC,uBAMxFpD,EAAAC,EAAAC,cAAA,OAAKM,UAAW,SACdR,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,SAAOwD,KAAK,OAAOlD,UAAU,eAAesB,GAAG,SAAS6B,SAAU9C,KAAKwC,iBACvErD,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAQwD,KAAK,SAASlD,UAAU,iBAAiBoD,QAAS/C,KAAKqB,eAA/D,iBAKJlC,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OAEfR,EAAAC,EAAAC,cAAC2D,EAAD,CAAMhE,MAAOgB,KAAKS,MAAMwB,kBArMZgB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANhD,gBAVa,CACTiD,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,uBAAuB,IAI3BC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.ad8f5613.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nfunction List(props) {\n\nconst listItems = props.items.map((film) => \n\t<tr>\n\t<th scope=\"row\">{film.ID}</th>\n\t<td>{film.title}</td>\n\t<td>{film.creator}</td>\n\t<td>{film.runtime}</td>\n\t</tr>\n\n      );\n\nreturn(\n<table className = \"table\">\n<thead>\n<tr>\n<th scope=\"col\">Film ID</th>\n      <th scope=\"col\">Title</th>\n      <th scope=\"col\">Creator</th>\n      <th scope=\"col\">Runtime</th>\n</tr>\n</thead>\n<tbody>\n\n{listItems}\n</tbody>\n</table>\n);\n}\n\n  export default List;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport List from './List';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      total: 50,\n      films: [\n      {ID:\"defaultID\", title:\"defaultTitle\", creator: \"defaultCreator\", runtime:\"defaultRuntime\"},\n      {ID:\"defaultID1\", title:\"defaultTitle\", creator: \"defaultCreator\", runtime:\"defaultRuntime\"}\n      ],\n      currentID: \"\",\n      currentTitle: \"\",\n      currentCreator: \"\",\n      currentRuntime: \"\"\n    }\n  }\n    \n  \n\n  componentDidMount() { \n    let currentComponent = this;\n\n    const db = firebase.firestore();\n    var totalRef = db.collection(\"total\").doc(\"total\");\n    var filmsRef = db.collection(\"films\");\n\n    this.readFilms();\n    //read total number of films from firestore\n    totalRef.get().then(function(doc){\n      if(doc.exists) {\n        console.log(\"Document data: \", doc.data());\n        currentComponent.setState({\n          total: doc.data().total\n        })\n\n\n      }else{\n        console.log(\"No such document!\");\n      }\n\n      }).catch(function(error) {\n    console.log(\"Error getting document:\", error);\n\n    });\n\n    }\n\n  addHandler = () => {\n    let currentComponent = this;\n    const db = firebase.firestore();\n    \n    var filmsRef = db.collection(\"films\");\n\n    filmsRef.add({\n      title: this.state.currentTitle,\n      creator: this.state.currentCreator,\n      runtime: this.state.currentRuntime\n    }).then(function(docRef) {\n    console.log(\"Document written with ID: \", docRef.id);\n})\n.catch(function(error) {\n    console.error(\"Error adding document: \", error);\n});\nthis.readFilms();\n\n\n\n  }\n\n  deleteHandler = () => {\n    const db = firebase.firestore();\n\n    db.collection(\"films\").doc(this.state.currentID).delete().then(function() {\n      console.log(\"Document successfully deleted!\");\n    }).catch(function(error)  {\n\n      console.log(\"Error removing document: \" + error);\n    });\n\n    this.readFilms();\n    }\n  \n\n  readFilms = () => {\n    let currentComponent = this;\n    const db = firebase.firestore();\n    var filmsRef = db.collection(\"films\");\n\n\n    //read data of films from firestore\n    filmsRef.get()\n    .then(function(querySnapshot) {\n      var filmsArr = [];\n        querySnapshot.forEach(function(doc) {\n            // doc.data() is never undefined for query doc snapshots\n             \n            filmsArr.push({\n              ID: doc.id, \n              title: doc.data().title,\n              creator: doc.data().creator, \n              runtime: doc.data().runtime\n            });\n            console.log(doc.id, \" => \", filmsArr);\n        });\n        console.log(\"Film Array: \" + filmsArr);\n        \n        currentComponent.setState({\n              films: filmsArr\n            });\n            \n    })\n    .catch(function(error) {\n        console.log(\"Error getting documents: \", error);\n    });\n\n\n  }\n\n  handleTitleChange = (e) => {\n    this.setState({\n      currentTitle: e.target.value\n    });\n  }\n\n  handleRuntimeChange = (e) => {\n    this.setState({\n      currentRuntime: e.target.value\n    });\n  }\n\n  handleCreatorChange = (e) => {\n    this.setState({\n      currentCreator: e.target.value\n    });\n  }\n\n  handleIDChange = (e) => {\n    this.setState({\n      currentID: e.target.value\n    });\n  }\n  render() {\n\n    return (\n      <div className =\"App\">\n      <div className = \"container\">\n      <h1>Digipops Coding Test</h1>\n      \n      <br></br>\n      <div className = \"row\">\n      <div className = \"col\">\n      <h4>Total Number of Films: {this.state.total}</h4>\n      </div>\n      </div>\n\n\n      <div className = \"row\">\n        <div className = \"col-4\">\n\n\n          \n          <p>Enter Film Title: </p>\n                    <input type=\"text\" className=\"form-control\" id=\"filmTitle\" onChange={this.handleTitleChange}></input>\n\n                    <p>Enter Film Runtime: </p>\n                    <input type=\"text\" className=\"form-control\" id=\"filmRuntime\" onChange={this.handleRuntimeChange}></input>\n\n          <br></br>\n      \n      \n          <button type=\"button\" className=\"btn btn-primary\" onClick={this.addHandler}>Add Film</button>\n          <br></br>\n        </div>\n\n\n        <div className = \"col-4\">\n          <p>Enter Film Creator: </p>\n                    <input type=\"text\" className=\"form-control\" id=\"filmCreator\" onChange={this.handleCreatorChange}></input>\n\n                    \n\n        </div>\n     \n        <div className =\"col-4\">\n          <p>Enter film ID to delete: </p>\n          <input type=\"text\" className=\"form-control\" id=\"delete\" onChange={this.handleIDChange}></input>\n          <br></br>\n      \n          <button type=\"button\" className=\"btn btn-danger\" onClick={this.deleteHandler}>Delete Film</button>\n        </div>\n\n      </div>\n\n      <br></br>\n\n      <div className=\"row\">\n        \n      <List items={this.state.films}></List>\n        \n      </div>\n\n      </div>\n      </div>\n      \n\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nvar config = {\n    apiKey: \"AIzaSyCorVqLiH-oPldWqkqJkp-aELjKDcAUZFQ\",\n    authDomain: \"digipopscodetest.firebaseapp.com\",\n    databaseURL: \"https://digipopscodetest.firebaseio.com\",\n    projectId: \"digipopscodetest\",\n    storageBucket: \"digipopscodetest.appspot.com\",\n    messagingSenderId: \"817896085352\",\n    timestampsInSnapshots: true\n  };\n\nfirebase.initializeApp(config);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}